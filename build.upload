apply from: 'build.shared'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

test {
  maxParallelForks = Math.max(1, (int)(Runtime.getRuntime().availableProcessors() / 2))
}

compileJava {
  String[] java8Paths = new String[5]
  java8Paths[0] = "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/"
  java8Paths[1] = "/usr/lib/jvm/java-8-openjdk/jre/lib/"
  java8Paths[2] = "/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/"
  java8Paths[3] = "/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/"
  java8Paths[4] = "/usr/lib/jvm/java-8-sun/jre/lib/"
  for (String path : java8Paths) {
    if (new java.io.File(path).exists()) {
      println 'Using java 8: ' + path
      options.bootstrapClasspath = fileTree(include: ['*.jar'], dir: path)
      break
    }
  }
  if (options.bootstrapClasspath == null) {
    println 'Unable to find java 8 rt.jar, will cause failure so exiting now'
    println ''
    System.exit(1)
  }
}

compileTestJava {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"

  String[] java8Paths = new String[5]
  java8Paths[0] = "/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/"
  java8Paths[1] = "/usr/lib/jvm/java-8-openjdk/jre/lib/"
  java8Paths[2] = "/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/"
  java8Paths[3] = "/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/"
  java8Paths[4] = "/usr/lib/jvm/java-8-sun/jre/lib/"
  for (String path : java8Paths) {
    if (new java.io.File(path).exists()) {
      options.bootstrapClasspath = fileTree(include: ['*.jar'], dir: path)
      break
    }
  }
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }
 
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
 
      pom.project {
        name 'Threadly'
        packaging 'jar'
        description 'A library of tools to assist with safe concurrent java development.  Providing a unique priority based thread pool, and ways to distrbute threaded work.'
        url 'http://threadly.org/'
 
        scm {
          url 'scm:git@github.com:threadly/threadly.git'
          connection 'scm:git@github.com:threadly/threadly.git'
          developerConnection 'scm:git@github.com:threadly/threadly.git'
        }
 
        licenses {
          license {
            name 'Mozilla Public License Version 2.0'
            url 'https://www.mozilla.org/MPL/2.0/'
            distribution 'repo'
          }
        }
 
        developers {
          developer {
            id 'jent'
            name 'Mike Jensen'
            email 'jent@threadly.org'
          }
        }
      }
    }
  }
}
